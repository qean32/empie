@import '../import.scss';

input {
    background-color: $background-color-dark;
    padding: 1vh 2.2vh;
    font-size: 1em;
    border-radius: 5px;
    border: 1px solid $border-color;
    outline: none;
    cursor: pointer;
    width: 100%;
    min-height: 26px;
}

label {
    @include positioncenterbyflex;
    justify-content: start;
    padding: 0 0 0 20px;
    width: 100%;
}

label>p {
    transition: .7s;
    font-size: 16px;
}

label:hover {
    cursor: pointer;
}

input:focus {
    border: 1px solid $border-color;
}

// input[type=text] {}

.inputwarning {
    color: $main-color;
    position: absolute;
    bottom: -20px;
    left: 1vh;
    font-size: 12px;
    transition: .5s;
    cursor: pointer;
    white-space: nowrap;
}

input[type=date] {
    border: none;
    outline: none;
    padding: 1vh 1.8vh;
}

input[type=time] {
    border: none;
    outline: none;
    padding: 1vh 1.8vh;
}

input[type=date]::-webkit-calendar-picker-indicator {
    background-image: url('/svg/calendar.svg');
    cursor: pointer;
}

input[type=time]::-webkit-calendar-picker-indicator {
    background-image: url('/svg/clock.svg');
    cursor: pointer;
}


.clocktable>div {
    background-color: $background-color-dark;
    padding: 10px 30px;
    height: 3vh;
    width: 5vh;
    min-height: 20px;
    min-width: 40px;
    transition: .4s;
    border-radius: 5px;
    transform: translate(-10vh, 0);
    position: absolute;
}

.clocktable>div:hover {
    background-color: $background-color-light;
}

@mixin on-circle($item-count, $circle-size, $item-size) {
    padding: 0;
    position: absolute;
    top: 4.8vh;
    left: 10vh;
    border-radius: 50%;
    list-style: none;

    >* {
        display: block;
        width: $item-size;
        height: $item-size;
        margin: -($item-size / 2);

        $angle: (
            360 / $item-count
        );
    $rot: 0;

    @for $i from 1 through $item-count {
        &:nth-of-type(#{$i}) {
            transform:
                rotate($rot * 1deg) translate($circle-size / 2) rotate($rot * -1deg);
        }

        $rot: $rot + $angle;
    }
}
}

.clocktable {
    margin: 0 0 0 2vh;
    position: absolute;
    left: 10vh;
    cursor: pointer;
    z-index: 12;
    transition: .7s;
    opacity: 0;
}

.circkle {
    opacity: 1;
    @include on-circle($item-count: 16, $circle-size: 280px, $item-size: 11vh);
}

.timeinput {
    padding: 1vh;
    width: 10vh;
    margin: 2vh 1vh;
}

.lockpass {
    position: absolute;
    right: -2vh;
    top: 2.2vh;
}

.checkbox_ {
    position: absolute;
    transform: translate(1vh, .5vh);
}

input[type=checkbox] {
    height: 1.7vh;
    width: 1.3vh;
    border: 2px solid $background-color-dark;
}

.inputfile {
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 20px;
}

.inputfile>div {
    display: flex;
    justify-content: center;
    align-items: center;
}

.smallinput > div{
    width: 35%;
}